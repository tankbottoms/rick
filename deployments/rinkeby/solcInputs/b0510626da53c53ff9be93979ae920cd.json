{
  "language": "Solidity",
  "sources": {
    "contracts/interfaces/RickRollInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\ninterface RickRollInterface {\n  function append(uint256[] memory buffer) external;\n  function getRickRoll() external view returns (string memory);\n  function setName(string memory _name) external;\n}\n"
    },
    "contracts/RickRoll.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\nimport {RickRollInterface} from './interfaces/RickRollInterface.sol';\nimport {Base64} from './libraries/Base64.sol';\n\ncontract RickRoll is RickRollInterface {\n  string public name;\n  uint256[] public arrayBuffer;\n  uint256 public bufferLength;\n  uint256 public noOfBytes;\n\n  constructor(uint256 _maxBufferLength, uint256 _noOfBytes) {\n    arrayBuffer = new uint256[](_maxBufferLength);\n    noOfBytes = _noOfBytes;\n  }\n\n  function append(uint256[] memory buffer) public override {\n    for (uint256 i = 0; i < buffer.length; i++) {\n      arrayBuffer[bufferLength + i] = buffer[i];\n    }\n    bufferLength += buffer.length;\n  }\n\n  function getRickRoll() public view override returns (string memory) {\n    bytes memory _bytes = new bytes(noOfBytes);\n    for (uint256 i = 0; i < arrayBuffer.length; i++) {\n      uint256 num = arrayBuffer[i];\n      for (uint256 j = 0; num > 0 && j < 32 && (i * 32 + j) < noOfBytes; j++) {\n        uint8 remainder = uint8(num % 0x100);\n        _bytes[i * 32 + j] = bytes1(uint8(remainder));\n        num = num / 0x100;\n      }\n    }\n    return string(abi.encodePacked('data:audio/mp3;base64,', Base64.encode(_bytes)));\n  }\n\n  function setName(string memory _name) public override {\n    name = _name;\n  }\n}\n"
    },
    "contracts/libraries/Base64.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\n/// [MIT License]\n/// @title Base64\n/// @notice Provides a function for encoding some bytes in base64\n/// @author Brecht Devos <brecht@loopring.org>\nlibrary Base64 {\n    bytes internal constant TABLE = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n    /// @notice Encodes some bytes to the base64 representation\n    function encode(bytes memory data) internal pure returns (string memory) {\n        uint256 len = data.length;\n        if (len == 0) return \"\";\n        // multiply by 4/3 rounded up\n        uint256 encodedLen = 4 * ((len + 2) / 3);\n\n        // Add some extra buffer at the end\n        bytes memory result = new bytes(encodedLen + 32);\n        bytes memory table = TABLE;\n\n        assembly {\n            let tablePtr := add(table, 1)\n            let resultPtr := add(result, 32)\n\n            for {\n                let i := 0\n            } lt(i, len) {\n\n            } {\n                i := add(i, 3)\n                let input := and(mload(add(data, i)), 0xffffff)\n                let out := mload(add(tablePtr, and(shr(18, input), 0x3F)))\n                out := shl(8, out)\n                out := add(out, and(mload(add(tablePtr, and(shr(12, input), 0x3F))), 0xFF))\n                out := shl(8, out)\n                out := add(out, and(mload(add(tablePtr, and(shr(6, input), 0x3F))), 0xFF))\n                out := shl(8, out)\n                out := add(out, and(mload(add(tablePtr, and(input, 0x3F))), 0xFF))\n                out := shl(224, out)\n                mstore(resultPtr, out)\n                resultPtr := add(resultPtr, 4)\n            }\n\n            switch mod(len, 3)\n            case 1 {\n                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\n            }\n            case 2 {\n                mstore(sub(resultPtr, 1), shl(248, 0x3d))\n            }\n\n            mstore(result, encodedLen)\n        }\n        return string(result);\n    }\n}"
    }
  },
  "settings": {
    "metadata": {
      "bytecodeHash": "none",
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 800
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    }
  }
}